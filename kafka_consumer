package main

import (
	"fmt"
	"os"
	"os/signal"
	"time"
	"log"

    "github.com/boltdb/bolt"
	 "gopkg.in/Shopify/sarama.v1"
)

func main() {
		 db, err := bolt.Open("hh.db", 0600, nil)
    if err != nil {
        log.Fatal(err)
    }
    defer db.Close()
	

	db.Update(func(tx *bolt.Tx) error {
    _, err := tx.CreateBucket([]byte("ADSERVER"))
    if err != nil {
        return fmt.Errorf("create bucket: %s", err)
    }
    return nil
})



	config := sarama.NewConfig()
	config.Consumer.Return.Errors = true

	// Specify brokers address. This is default one
	brokers := []string{"localhost:9092"}

	// Create new consumer
	master, err := sarama.NewConsumer(brokers, config)
	if err != nil {
		panic(err)
	}

	defer func() {
		if err := master.Close(); err != nil {
			panic(err)
		}
	}()

	topic := "test"

	consumer, err := master.ConsumePartition(topic, 0, sarama.OffsetOldest)
	if err != nil {
		panic(err)
	}

	signals := make(chan os.Signal, 1)
	signal.Notify(signals, os.Interrupt)

	// Count how many message processed
	msgCount := 0
startTime := time.Now()
	// Get signnal for finish
	doneCh := make(chan struct{})
	go func() {
		for {
			select {
			case err := <-consumer.Errors():
				fmt.Println(err)
			case msg := <-consumer.Messages():
				msgCount++
				fmt.Println("Received messages", string(msg.Key), string(msg.Value))
									/*db.Update(func(tx *bolt.Tx) error {
					    l := tx.Bucket([]byte("ADSERVER"))
					    err := l.Put([]byte(string(msg.Key)), []byte(string(msg.Value)))
					    return err
					})*/
			case <-signals:
				fmt.Println("Interrupt is detected")
				doneCh <- struct{}{}
			}
		}
	}()
	

	<-doneCh
	log.Printf("it only took %.3f seconds!", time.Since(startTime).Seconds())
	fmt.Println("Processed", msgCount, "messages")

}
